// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  token        String
  createdAt    DateTime
  updatedAt    DateTime
  ipAddress    String?
  userAgent    String?

  @@unique([token])
  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  recipes       Recipe[]
  comments      Comment[]
  ratings       Rating[]
  createdAt     DateTime
  updatedAt     DateTime

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model souboru

model File {
  id            String       @id @default(uuid())
  bucket        String
  fileName      String       @unique
  originalName  String
  createdAt     DateTime     @default(now())
  size          Int
  instruction   Instruction? @relation(fields: [instructionId], references: [id])
  instructionId Int?
  recipeId      Int
  Recipe        Recipe       @relation(fields: [recipeId], references: [id])
}

// Model obrázku pro recept

model Image {
  id       Int    @id @default(autoincrement())
  url      String
  recipeId Int
}

// Model receptu

model Recipe {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  preparationTime   Int
  servings          Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  images            File[]
  recipeIngredients RecipeIngredient[]
  instructions      Instruction[]
  comments          Comment[]
  ratings           Rating[]
}

// Model ingredience

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String
  recipeIngredients RecipeIngredient[]
}

// Model ingredience v receptu

model RecipeIngredient {
  recipeId     Int
  ingredientId Int
  quantity     Float
  unit         String
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([recipeId, ingredientId])
}

// Model instrukce pro recept

model Instruction {
  id       Int    @id @default(autoincrement())
  recipeId Int
  step     Int
  text     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  images   File[]
}

// Model komentáře

model Comment {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

// Model hodnocení

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  rating    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
